var fontkit = require('fontkit');
var fs = require('fs');
var rimraf = require('rimraf');
var mkdirp = require('mkdirp');
var punycode = require('punycode');
var regenerate = require('regenerate');

// delete the images directory and re-create it
rimraf.sync(__dirname + '/images');
mkdirp.sync(__dirname + '/images');

var font = fontkit.openSync('/System/Library/Fonts/Apple Color Emoji.ttf');
var set = regenerate();
var extraParts = [];

function writeImage(glyph) {
  // extract an image for this glyph
  var image = glyph.getImageForSize(64);
  
  if (image) {
    // compute the filename
    var name = punycode.ucs2.encode(glyph.codePoints.slice())
      .split('')
      .map(function(c) { return ('0000' + c.charCodeAt(0).toString(16)).slice(-4) });
      
    // add codepoint to regex
    // if only one codepoint, we can add via regenerate (which compresses the regex)
    // otherwise, track the codepoints separately to be added later
    if (glyph.codePoints.length == 1) {
      set.add(glyph.codePoints[0]);
    } else  {
      extraParts.push('\\u' + name.join('\\ufe0f?\\u'));
    }
    
    fs.writeFileSync(__dirname + '/images/' + name.join('-') + '.png', image.data);
  }
}

// write longest characters first so regex works correctly
// first, the flag glyphs
var glyphs = font.glyphsForString('ğŸ‡¨ğŸ‡³ğŸ‡©ğŸ‡ªğŸ‡ªğŸ‡¸ğŸ‡«ğŸ‡·ğŸ‡¬ğŸ‡§ğŸ‡®ğŸ‡¹ğŸ‡¯ğŸ‡µğŸ‡°ğŸ‡·ğŸ‡·ğŸ‡ºğŸ‡ºğŸ‡¸');
glyphs.forEach(writeImage);

// next, keycap characters
'#0123456789'.split('').forEach(function(c) {
  var glyphs = font.glyphsForString(c + '\u20E3');
  if (glyphs.length == 1)
    writeImage(glyphs[0]);
});

// and finally, write individual glyphs in the character set
font.characterSet.forEach(function(codePoint) {
  writeImage(font.glyphForCodePoint(codePoint));
});

// write the generated regex to a file to be included by the runtime module
fs.writeFileSync(__dirname + '/regex.js', 
  '/* AUTOGENERATED. DO NOT EDIT. */\n' +
  'module.exports = ' + new RegExp('(?:' + extraParts.join('|') + '|' + set + ')[\\ufe00-\\ufe0f]?', 'g') + ';\n');
